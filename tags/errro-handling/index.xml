<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>errro handling on Theoretically Josh</title><link>https://theoreticallyjosh.com/tags/errro-handling/</link><description>Recent content in errro handling on Theoretically Josh</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>jlhags+blog@gmail.com (Joshua Hagofsky)</managingEditor><webMaster>jlhags+blog@gmail.com (Joshua Hagofsky)</webMaster><lastBuildDate>Wed, 07 Dec 2022 11:20:36 -0700</lastBuildDate><atom:link href="https://theoreticallyjosh.com/tags/errro-handling/index.xml" rel="self" type="application/rss+xml"/><item><title>Beginning Programming Lesson 06</title><link>https://theoreticallyjosh.com/post/beginning-programming-lesson-06/</link><pubDate>Wed, 07 Dec 2022 11:20:36 -0700</pubDate><author>jlhags+blog@gmail.com (Joshua Hagofsky)</author><guid>https://theoreticallyjosh.com/post/beginning-programming-lesson-06/</guid><description>When I was in college my professor explained recursion as &amp;ldquo;Pretend you already have a function that does what you need to do.&amp;rdquo; The problem with that explanation is, it only makes sense after you understand recursion. I think we can do better here. While we are at it, let&amp;rsquo;s look at error handling too. You can find the code for today&amp;rsquo;s lesson here.
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;log&amp;#34; ) type MinInputError struct { } func (e *MinInputError) Error() string { return &amp;#34;invalid input, number must be greater than 0&amp;#34; } type MaxInputError struct { } func (e *MaxInputError) Error() string { return &amp;#34;invalid input, number must be less than 100&amp;#34; } func Factorial(n int) int { if n == 1 { return n } return n * Factorial(n-1) } func Factorial2(n int) (int, error) { if n &amp;lt; 0 { return 0, &amp;amp;MinInputError{} } if n &amp;gt; 100 { return 0, &amp;amp;MaxInputError{} } ret := n for i := n - 1; i &amp;gt; 0; i-- { ret = ret * i } return ret, nil } func main() { fmt.</description></item></channel></rss>